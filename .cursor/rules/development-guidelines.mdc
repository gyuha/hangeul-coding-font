---
description:
globs:
alwaysApply: false
---
# 개발 가이드라인

## 코딩 컨벤션

### TypeScript
- 모든 컴포넌트와 함수는 TypeScript로 작성
- 명시적인 타입 정의 사용 (any 타입 금지)
- 인터페이스는 [src/types/font.ts](mdc:src/types/font.ts)에 정의
- 컴포넌트 props는 인터페이스로 정의

### React 컴포넌트
- 함수형 컴포넌트 사용
- React Hooks 활용 (useState, useEffect, useCallback 등)
- 컴포넌트는 [src/components/](mdc:src/components/) 디렉토리에 배치
- 커스텀 훅은 [src/hooks/](mdc:src/hooks/) 디렉토리에 배치

### 스타일링
- Tailwind CSS 클래스 사용
- shadcn/ui 컴포넌트 활용
- 다크모드 지원 (dark: 접두사 사용)
- 반응형 디자인 적용

### 폰트 처리
- opentype.js 라이브러리 사용
- 폰트 로딩 및 병합 로직은 [src/hooks/useFontMerger.ts](mdc:src/hooks/useFontMerger.ts)에 집중
- 에러 처리 및 로딩 상태 관리

## 파일 구조 규칙
```
src/
├── components/     # 재사용 가능한 UI 컴포넌트
├── hooks/         # 커스텀 React 훅
├── types/         # TypeScript 타입 정의
├── lib/           # 유틸리티 함수
└── assets/        # 정적 자산
```

## 네이밍 컨벤션
- 컴포넌트: PascalCase (예: FontUploader)
- 훅: camelCase with 'use' prefix (예: useFontMerger)
- 타입/인터페이스: PascalCase (예: FontInfo, MergeOptions)
- 파일명: 컴포넌트와 동일한 이름 사용
